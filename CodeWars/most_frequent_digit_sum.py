def step(x):
    """
    Calculate one step in the sequence by subtracting the sum of digits from the number.
    
    Args:
        x (int): Input number
    
    Returns:
        int: Result of x minus sum of its digits
    """
    return x - sum(int(digit) for digit in str(x))

def solution(n):
    """
    Find the most frequent digit sum in a sequence generated by repeatedly applying
    the step function until reaching 0, then converting all numbers to their digit sums.
    
    The step function transforms a number x into x - s(x), where s(x) is the sum of x's digits.
    For example: step(27) = 27 - (2+7) = 27 - 9 = 18
    
    Args:
        n (int): Starting number for the sequence
        
    Returns:
        int: The largest digit sum that appears most frequently in the transformed sequence
        
    Example:
        >>> solution(27)
        9
        # Explanation:
        # Original sequence: [27, 18, 9, 0]
        # Digit sums: [9, 9, 9, 0]
        # 9 appears most frequently (3 times)
    """
    # Generate sequence until we reach 0
    sequence = [n]
    while sequence[-1] != 0:
        sequence.append(step(sequence[-1]))
    
    # Transform each number into its digit sum
    digit_sums = [sum(int(digit) for digit in str(x)) for x in sequence]
    
    # Count frequency of each digit sum
    freq = {}
    for digit_sum in digit_sums:
        freq[digit_sum] = freq.get(digit_sum, 0) + 1
    
    # Find the maximum frequency
    max_freq = max(freq.values())
    
    # Get all digit sums that appear max_freq times
    most_frequent = [digit_sum for digit_sum in freq if freq[digit_sum] == max_freq]
    
    # Return the largest among the most frequent digit sums
    return max(most_frequent)

# Driver code to test the solution
def test_solution():
    test_cases = [
        (27, 9),    # Sequence: [27, 18, 9, 0] → Digit sums: [9, 9, 9, 0]
        (999, 27),  # Sequence: [999, 972, 954, 936, ..., 9, 0]
        (100, 1),   # Sequence: [100, 99, 81, 72, 63, 54, 45, 36, 27, 18, 9, 0]
    ]
    
    for input_n, expected in test_cases:
        result = solution(input_n)
        print(f"Input: {input_n}")
        print(f"Expected: {expected}")
        print(f"Got: {result}")
        print(f"{'✓ Passed' if result == expected else '✗ Failed'}\n")

if __name__ == "__main__":
    test_solution()
