class Solution:
    def countAndSay(self, n: int) -> str:
        """
        Returns the nth term of the count-and-say sequence.

        The count-and-say sequence is generated by reading off the digits of the previous term and counting the number
        of digits in groups of the same digit. For instance:
          - Term 1: "1"
          - Term 2: "11"   => one 1 -> "11"
          - Term 3: "21"   => two 1's -> "21"
          - Term 4: "1211" => one 2, then one 1 -> "1211"
          - Term 5: "111221" => one 1, one 2, then two 1's -> "111221"

        Args:
            n (int): The position of the term in the sequence to generate.

        Returns:
            str: The nth term of the count-and-say sequence.
        """
        # Base Case: The first term of the sequence is defined as "1"
        if n == 1:
            return "1"

        # Recursive Case: Get the (n-1)th term and construct the nth term based on it
        prev_sequence = self.countAndSay(n - 1)
        result = ""  # This will store the resulting term
        count = 1   # Counter for the number of identical consecutive digits
        i = 0       # Index for iterating through prev_sequence

        # Traverse through the previous sequence string
        while i < len(prev_sequence):
            # Continue counting as long as the next character is the same as the current
            while i < len(prev_sequence) - 1 and prev_sequence[i] == prev_sequence[i + 1]:
                count += 1  # Increase the count for this digit
                i += 1    # Move index to next position within identical digits

            # Append the count and the digit value to the result string
            result += str(count) + prev_sequence[i]
            count = 1   # Reset count for the next group of digits
            i += 1      # Move to the next digit group

        return result

# Driver code for testing the solution
if __name__ == "__main__":
    sol = Solution()
    
    # Example test cases
    test_cases = [1, 2, 3, 4, 5, 6, 7, 8]
    
    for n in test_cases:
        print(f"The {n}th term of the count-and-say sequence is: {sol.countAndSay(n)}")
